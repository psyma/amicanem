/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@ffmpeg/ffmpeg/dist/esm/const.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/dist/esm/const.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CORE_URL: () => (/* binding */ CORE_URL),
/* harmony export */   CORE_VERSION: () => (/* binding */ CORE_VERSION),
/* harmony export */   FFMessageType: () => (/* binding */ FFMessageType),
/* harmony export */   MIME_TYPE_JAVASCRIPT: () => (/* binding */ MIME_TYPE_JAVASCRIPT),
/* harmony export */   MIME_TYPE_WASM: () => (/* binding */ MIME_TYPE_WASM)
/* harmony export */ });
const MIME_TYPE_JAVASCRIPT = "text/javascript";
const MIME_TYPE_WASM = "application/wasm";
const CORE_VERSION = "0.12.6";
const CORE_URL = `https://unpkg.com/@ffmpeg/core@${CORE_VERSION}/dist/umd/ffmpeg-core.js`;
var FFMessageType;
(function (FFMessageType) {
    FFMessageType["LOAD"] = "LOAD";
    FFMessageType["EXEC"] = "EXEC";
    FFMessageType["WRITE_FILE"] = "WRITE_FILE";
    FFMessageType["READ_FILE"] = "READ_FILE";
    FFMessageType["DELETE_FILE"] = "DELETE_FILE";
    FFMessageType["RENAME"] = "RENAME";
    FFMessageType["CREATE_DIR"] = "CREATE_DIR";
    FFMessageType["LIST_DIR"] = "LIST_DIR";
    FFMessageType["DELETE_DIR"] = "DELETE_DIR";
    FFMessageType["ERROR"] = "ERROR";
    FFMessageType["DOWNLOAD"] = "DOWNLOAD";
    FFMessageType["PROGRESS"] = "PROGRESS";
    FFMessageType["LOG"] = "LOG";
    FFMessageType["MOUNT"] = "MOUNT";
    FFMessageType["UNMOUNT"] = "UNMOUNT";
})(FFMessageType || (FFMessageType = {}));


/***/ }),

/***/ "./node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js":
/*!********************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ERROR_IMPORT_FAILURE: () => (/* binding */ ERROR_IMPORT_FAILURE),
/* harmony export */   ERROR_NOT_LOADED: () => (/* binding */ ERROR_NOT_LOADED),
/* harmony export */   ERROR_TERMINATED: () => (/* binding */ ERROR_TERMINATED),
/* harmony export */   ERROR_UNKNOWN_MESSAGE_TYPE: () => (/* binding */ ERROR_UNKNOWN_MESSAGE_TYPE)
/* harmony export */ });
const ERROR_UNKNOWN_MESSAGE_TYPE = new Error("unknown message type");
const ERROR_NOT_LOADED = new Error("ffmpeg is not loaded, call `await ffmpeg.load()` first");
const ERROR_TERMINATED = new Error("called FFmpeg.terminate()");
const ERROR_IMPORT_FAILURE = new Error("failed to import ffmpeg-core.js");


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!********************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/dist/esm/worker.js ***!
  \********************************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./const.js */ "./node_modules/@ffmpeg/ffmpeg/dist/esm/const.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors.js */ "./node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js");
/// <reference no-default-lib="true" />
/// <reference lib="esnext" />
/// <reference lib="webworker" />


let ffmpeg;
const load = async ({ coreURL: _coreURL, wasmURL: _wasmURL, workerURL: _workerURL, }) => {
    const first = !ffmpeg;
    try {
        if (!_coreURL)
            _coreURL = _const_js__WEBPACK_IMPORTED_MODULE_0__.CORE_URL;
        // when web worker type is `classic`.
        importScripts(_coreURL);
    }
    catch {
        if (!_coreURL)
            _coreURL = _const_js__WEBPACK_IMPORTED_MODULE_0__.CORE_URL.replace('/umd/', '/esm/');
        // when web worker type is `module`.
        self.createFFmpegCore = (await import(
        /* webpackIgnore: true */ /* @vite-ignore */ _coreURL)).default;
        if (!self.createFFmpegCore) {
            throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.ERROR_IMPORT_FAILURE;
        }
    }
    const coreURL = _coreURL;
    const wasmURL = _wasmURL ? _wasmURL : _coreURL.replace(/.js$/g, ".wasm");
    const workerURL = _workerURL
        ? _workerURL
        : _coreURL.replace(/.js$/g, ".worker.js");
    ffmpeg = await self.createFFmpegCore({
        // Fix `Overload resolution failed.` when using multi-threaded ffmpeg-core.
        // Encoded wasmURL and workerURL in the URL as a hack to fix locateFile issue.
        mainScriptUrlOrBlob: `${coreURL}#${btoa(JSON.stringify({ wasmURL, workerURL }))}`,
    });
    ffmpeg.setLogger((data) => self.postMessage({ type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.LOG, data }));
    ffmpeg.setProgress((data) => self.postMessage({
        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.PROGRESS,
        data,
    }));
    return first;
};
const exec = ({ args, timeout = -1 }) => {
    ffmpeg.setTimeout(timeout);
    ffmpeg.exec(...args);
    const ret = ffmpeg.ret;
    ffmpeg.reset();
    return ret;
};
const writeFile = ({ path, data }) => {
    ffmpeg.FS.writeFile(path, data);
    return true;
};
const readFile = ({ path, encoding }) => ffmpeg.FS.readFile(path, { encoding });
// TODO: check if deletion works.
const deleteFile = ({ path }) => {
    ffmpeg.FS.unlink(path);
    return true;
};
const rename = ({ oldPath, newPath }) => {
    ffmpeg.FS.rename(oldPath, newPath);
    return true;
};
// TODO: check if creation works.
const createDir = ({ path }) => {
    ffmpeg.FS.mkdir(path);
    return true;
};
const listDir = ({ path }) => {
    const names = ffmpeg.FS.readdir(path);
    const nodes = [];
    for (const name of names) {
        const stat = ffmpeg.FS.stat(`${path}/${name}`);
        const isDir = ffmpeg.FS.isDir(stat.mode);
        nodes.push({ name, isDir });
    }
    return nodes;
};
// TODO: check if deletion works.
const deleteDir = ({ path }) => {
    ffmpeg.FS.rmdir(path);
    return true;
};
const mount = ({ fsType, options, mountPoint }) => {
    const str = fsType;
    const fs = ffmpeg.FS.filesystems[str];
    if (!fs)
        return false;
    ffmpeg.FS.mount(fs, options, mountPoint);
    return true;
};
const unmount = ({ mountPoint }) => {
    ffmpeg.FS.unmount(mountPoint);
    return true;
};
self.onmessage = async ({ data: { id, type, data: _data }, }) => {
    const trans = [];
    let data;
    try {
        if (type !== _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.LOAD && !ffmpeg)
            throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.ERROR_NOT_LOADED; // eslint-disable-line
        switch (type) {
            case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.LOAD:
                data = await load(_data);
                break;
            case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.EXEC:
                data = exec(_data);
                break;
            case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.WRITE_FILE:
                data = writeFile(_data);
                break;
            case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.READ_FILE:
                data = readFile(_data);
                break;
            case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.DELETE_FILE:
                data = deleteFile(_data);
                break;
            case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.RENAME:
                data = rename(_data);
                break;
            case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.CREATE_DIR:
                data = createDir(_data);
                break;
            case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.LIST_DIR:
                data = listDir(_data);
                break;
            case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.DELETE_DIR:
                data = deleteDir(_data);
                break;
            case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.MOUNT:
                data = mount(_data);
                break;
            case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.UNMOUNT:
                data = unmount(_data);
                break;
            default:
                throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.ERROR_UNKNOWN_MESSAGE_TYPE;
        }
    }
    catch (e) {
        self.postMessage({
            id,
            type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.ERROR,
            data: e.toString(),
        });
        return;
    }
    if (data instanceof Uint8Array) {
        trans.push(data.buffer);
    }
    self.postMessage({ id, type, data }, trans);
};

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2ZmbXBlZ19mZm1wZWdfZGlzdF9lc21fd29ya2VyX2pzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFPO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxhQUFhO0FBQ2hFO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNDQUFzQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDckJoQztBQUNBO0FBQ0E7QUFDQTs7Ozs7OztVQ0hQO1VBQ0E7O1VBRUE7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7O1VBRUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7Ozs7O1dDdEJBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EseUNBQXlDLHdDQUF3QztXQUNqRjtXQUNBO1dBQ0E7Ozs7O1dDUEE7Ozs7O1dDQUE7V0FDQTtXQUNBO1dBQ0EsdURBQXVELGlCQUFpQjtXQUN4RTtXQUNBLGdEQUFnRCxhQUFhO1dBQzdEOzs7Ozs7Ozs7OztBQ05BO0FBQ0E7QUFDQTtBQUNxRDtBQUM2QztBQUNsRztBQUNBLHNCQUFzQiw4REFBOEQ7QUFDcEY7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLCtDQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsK0NBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsNERBQW9CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFFBQVEsR0FBRyxzQkFBc0Isb0JBQW9CLEdBQUc7QUFDeEYsS0FBSztBQUNMLGtEQUFrRCxNQUFNLG9EQUFhLFlBQVk7QUFDakY7QUFDQSxjQUFjLG9EQUFhO0FBQzNCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixZQUFZO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0IsZ0NBQWdDLFVBQVU7QUFDOUU7QUFDQSxzQkFBc0IsTUFBTTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLE1BQU07QUFDM0I7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLE1BQU07QUFDekI7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLEtBQUssR0FBRyxLQUFLO0FBQ3BEO0FBQ0EscUJBQXFCLGFBQWE7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsTUFBTTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsNkJBQTZCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFlBQVk7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLFFBQVEsdUJBQXVCLEdBQUc7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG9EQUFhO0FBQ2xDLGtCQUFrQix3REFBZ0IsRUFBRTtBQUNwQztBQUNBLGlCQUFpQixvREFBYTtBQUM5QjtBQUNBO0FBQ0EsaUJBQWlCLG9EQUFhO0FBQzlCO0FBQ0E7QUFDQSxpQkFBaUIsb0RBQWE7QUFDOUI7QUFDQTtBQUNBLGlCQUFpQixvREFBYTtBQUM5QjtBQUNBO0FBQ0EsaUJBQWlCLG9EQUFhO0FBQzlCO0FBQ0E7QUFDQSxpQkFBaUIsb0RBQWE7QUFDOUI7QUFDQTtBQUNBLGlCQUFpQixvREFBYTtBQUM5QjtBQUNBO0FBQ0EsaUJBQWlCLG9EQUFhO0FBQzlCO0FBQ0E7QUFDQSxpQkFBaUIsb0RBQWE7QUFDOUI7QUFDQTtBQUNBLGlCQUFpQixvREFBYTtBQUM5QjtBQUNBO0FBQ0EsaUJBQWlCLG9EQUFhO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrRUFBMEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixvREFBYTtBQUMvQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGdCQUFnQjtBQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL2ZmbXBlZy9kaXN0L2VzbS9jb25zdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZmbXBlZy9mZm1wZWcvZGlzdC9lc20vZXJyb3JzLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL2ZmbXBlZy9kaXN0L2VzbS93b3JrZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IE1JTUVfVFlQRV9KQVZBU0NSSVBUID0gXCJ0ZXh0L2phdmFzY3JpcHRcIjtcbmV4cG9ydCBjb25zdCBNSU1FX1RZUEVfV0FTTSA9IFwiYXBwbGljYXRpb24vd2FzbVwiO1xuZXhwb3J0IGNvbnN0IENPUkVfVkVSU0lPTiA9IFwiMC4xMi42XCI7XG5leHBvcnQgY29uc3QgQ09SRV9VUkwgPSBgaHR0cHM6Ly91bnBrZy5jb20vQGZmbXBlZy9jb3JlQCR7Q09SRV9WRVJTSU9OfS9kaXN0L3VtZC9mZm1wZWctY29yZS5qc2A7XG5leHBvcnQgdmFyIEZGTWVzc2FnZVR5cGU7XG4oZnVuY3Rpb24gKEZGTWVzc2FnZVR5cGUpIHtcbiAgICBGRk1lc3NhZ2VUeXBlW1wiTE9BRFwiXSA9IFwiTE9BRFwiO1xuICAgIEZGTWVzc2FnZVR5cGVbXCJFWEVDXCJdID0gXCJFWEVDXCI7XG4gICAgRkZNZXNzYWdlVHlwZVtcIldSSVRFX0ZJTEVcIl0gPSBcIldSSVRFX0ZJTEVcIjtcbiAgICBGRk1lc3NhZ2VUeXBlW1wiUkVBRF9GSUxFXCJdID0gXCJSRUFEX0ZJTEVcIjtcbiAgICBGRk1lc3NhZ2VUeXBlW1wiREVMRVRFX0ZJTEVcIl0gPSBcIkRFTEVURV9GSUxFXCI7XG4gICAgRkZNZXNzYWdlVHlwZVtcIlJFTkFNRVwiXSA9IFwiUkVOQU1FXCI7XG4gICAgRkZNZXNzYWdlVHlwZVtcIkNSRUFURV9ESVJcIl0gPSBcIkNSRUFURV9ESVJcIjtcbiAgICBGRk1lc3NhZ2VUeXBlW1wiTElTVF9ESVJcIl0gPSBcIkxJU1RfRElSXCI7XG4gICAgRkZNZXNzYWdlVHlwZVtcIkRFTEVURV9ESVJcIl0gPSBcIkRFTEVURV9ESVJcIjtcbiAgICBGRk1lc3NhZ2VUeXBlW1wiRVJST1JcIl0gPSBcIkVSUk9SXCI7XG4gICAgRkZNZXNzYWdlVHlwZVtcIkRPV05MT0FEXCJdID0gXCJET1dOTE9BRFwiO1xuICAgIEZGTWVzc2FnZVR5cGVbXCJQUk9HUkVTU1wiXSA9IFwiUFJPR1JFU1NcIjtcbiAgICBGRk1lc3NhZ2VUeXBlW1wiTE9HXCJdID0gXCJMT0dcIjtcbiAgICBGRk1lc3NhZ2VUeXBlW1wiTU9VTlRcIl0gPSBcIk1PVU5UXCI7XG4gICAgRkZNZXNzYWdlVHlwZVtcIlVOTU9VTlRcIl0gPSBcIlVOTU9VTlRcIjtcbn0pKEZGTWVzc2FnZVR5cGUgfHwgKEZGTWVzc2FnZVR5cGUgPSB7fSkpO1xuIiwiZXhwb3J0IGNvbnN0IEVSUk9SX1VOS05PV05fTUVTU0FHRV9UWVBFID0gbmV3IEVycm9yKFwidW5rbm93biBtZXNzYWdlIHR5cGVcIik7XG5leHBvcnQgY29uc3QgRVJST1JfTk9UX0xPQURFRCA9IG5ldyBFcnJvcihcImZmbXBlZyBpcyBub3QgbG9hZGVkLCBjYWxsIGBhd2FpdCBmZm1wZWcubG9hZCgpYCBmaXJzdFwiKTtcbmV4cG9ydCBjb25zdCBFUlJPUl9URVJNSU5BVEVEID0gbmV3IEVycm9yKFwiY2FsbGVkIEZGbXBlZy50ZXJtaW5hdGUoKVwiKTtcbmV4cG9ydCBjb25zdCBFUlJPUl9JTVBPUlRfRkFJTFVSRSA9IG5ldyBFcnJvcihcImZhaWxlZCB0byBpbXBvcnQgZmZtcGVnLWNvcmUuanNcIik7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vLyA8cmVmZXJlbmNlIG5vLWRlZmF1bHQtbGliPVwidHJ1ZVwiIC8+XG4vLy8gPHJlZmVyZW5jZSBsaWI9XCJlc25leHRcIiAvPlxuLy8vIDxyZWZlcmVuY2UgbGliPVwid2Vid29ya2VyXCIgLz5cbmltcG9ydCB7IENPUkVfVVJMLCBGRk1lc3NhZ2VUeXBlIH0gZnJvbSBcIi4vY29uc3QuanNcIjtcbmltcG9ydCB7IEVSUk9SX1VOS05PV05fTUVTU0FHRV9UWVBFLCBFUlJPUl9OT1RfTE9BREVELCBFUlJPUl9JTVBPUlRfRkFJTFVSRSwgfSBmcm9tIFwiLi9lcnJvcnMuanNcIjtcbmxldCBmZm1wZWc7XG5jb25zdCBsb2FkID0gYXN5bmMgKHsgY29yZVVSTDogX2NvcmVVUkwsIHdhc21VUkw6IF93YXNtVVJMLCB3b3JrZXJVUkw6IF93b3JrZXJVUkwsIH0pID0+IHtcbiAgICBjb25zdCBmaXJzdCA9ICFmZm1wZWc7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFfY29yZVVSTClcbiAgICAgICAgICAgIF9jb3JlVVJMID0gQ09SRV9VUkw7XG4gICAgICAgIC8vIHdoZW4gd2ViIHdvcmtlciB0eXBlIGlzIGBjbGFzc2ljYC5cbiAgICAgICAgaW1wb3J0U2NyaXB0cyhfY29yZVVSTCk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgaWYgKCFfY29yZVVSTClcbiAgICAgICAgICAgIF9jb3JlVVJMID0gQ09SRV9VUkwucmVwbGFjZSgnL3VtZC8nLCAnL2VzbS8nKTtcbiAgICAgICAgLy8gd2hlbiB3ZWIgd29ya2VyIHR5cGUgaXMgYG1vZHVsZWAuXG4gICAgICAgIHNlbGYuY3JlYXRlRkZtcGVnQ29yZSA9IChhd2FpdCBpbXBvcnQoXG4gICAgICAgIC8qIHdlYnBhY2tJZ25vcmU6IHRydWUgKi8gLyogQHZpdGUtaWdub3JlICovIF9jb3JlVVJMKSkuZGVmYXVsdDtcbiAgICAgICAgaWYgKCFzZWxmLmNyZWF0ZUZGbXBlZ0NvcmUpIHtcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0lNUE9SVF9GQUlMVVJFO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNvcmVVUkwgPSBfY29yZVVSTDtcbiAgICBjb25zdCB3YXNtVVJMID0gX3dhc21VUkwgPyBfd2FzbVVSTCA6IF9jb3JlVVJMLnJlcGxhY2UoLy5qcyQvZywgXCIud2FzbVwiKTtcbiAgICBjb25zdCB3b3JrZXJVUkwgPSBfd29ya2VyVVJMXG4gICAgICAgID8gX3dvcmtlclVSTFxuICAgICAgICA6IF9jb3JlVVJMLnJlcGxhY2UoLy5qcyQvZywgXCIud29ya2VyLmpzXCIpO1xuICAgIGZmbXBlZyA9IGF3YWl0IHNlbGYuY3JlYXRlRkZtcGVnQ29yZSh7XG4gICAgICAgIC8vIEZpeCBgT3ZlcmxvYWQgcmVzb2x1dGlvbiBmYWlsZWQuYCB3aGVuIHVzaW5nIG11bHRpLXRocmVhZGVkIGZmbXBlZy1jb3JlLlxuICAgICAgICAvLyBFbmNvZGVkIHdhc21VUkwgYW5kIHdvcmtlclVSTCBpbiB0aGUgVVJMIGFzIGEgaGFjayB0byBmaXggbG9jYXRlRmlsZSBpc3N1ZS5cbiAgICAgICAgbWFpblNjcmlwdFVybE9yQmxvYjogYCR7Y29yZVVSTH0jJHtidG9hKEpTT04uc3RyaW5naWZ5KHsgd2FzbVVSTCwgd29ya2VyVVJMIH0pKX1gLFxuICAgIH0pO1xuICAgIGZmbXBlZy5zZXRMb2dnZXIoKGRhdGEpID0+IHNlbGYucG9zdE1lc3NhZ2UoeyB0eXBlOiBGRk1lc3NhZ2VUeXBlLkxPRywgZGF0YSB9KSk7XG4gICAgZmZtcGVnLnNldFByb2dyZXNzKChkYXRhKSA9PiBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogRkZNZXNzYWdlVHlwZS5QUk9HUkVTUyxcbiAgICAgICAgZGF0YSxcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZpcnN0O1xufTtcbmNvbnN0IGV4ZWMgPSAoeyBhcmdzLCB0aW1lb3V0ID0gLTEgfSkgPT4ge1xuICAgIGZmbXBlZy5zZXRUaW1lb3V0KHRpbWVvdXQpO1xuICAgIGZmbXBlZy5leGVjKC4uLmFyZ3MpO1xuICAgIGNvbnN0IHJldCA9IGZmbXBlZy5yZXQ7XG4gICAgZmZtcGVnLnJlc2V0KCk7XG4gICAgcmV0dXJuIHJldDtcbn07XG5jb25zdCB3cml0ZUZpbGUgPSAoeyBwYXRoLCBkYXRhIH0pID0+IHtcbiAgICBmZm1wZWcuRlMud3JpdGVGaWxlKHBhdGgsIGRhdGEpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbmNvbnN0IHJlYWRGaWxlID0gKHsgcGF0aCwgZW5jb2RpbmcgfSkgPT4gZmZtcGVnLkZTLnJlYWRGaWxlKHBhdGgsIHsgZW5jb2RpbmcgfSk7XG4vLyBUT0RPOiBjaGVjayBpZiBkZWxldGlvbiB3b3Jrcy5cbmNvbnN0IGRlbGV0ZUZpbGUgPSAoeyBwYXRoIH0pID0+IHtcbiAgICBmZm1wZWcuRlMudW5saW5rKHBhdGgpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbmNvbnN0IHJlbmFtZSA9ICh7IG9sZFBhdGgsIG5ld1BhdGggfSkgPT4ge1xuICAgIGZmbXBlZy5GUy5yZW5hbWUob2xkUGF0aCwgbmV3UGF0aCk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLy8gVE9ETzogY2hlY2sgaWYgY3JlYXRpb24gd29ya3MuXG5jb25zdCBjcmVhdGVEaXIgPSAoeyBwYXRoIH0pID0+IHtcbiAgICBmZm1wZWcuRlMubWtkaXIocGF0aCk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuY29uc3QgbGlzdERpciA9ICh7IHBhdGggfSkgPT4ge1xuICAgIGNvbnN0IG5hbWVzID0gZmZtcGVnLkZTLnJlYWRkaXIocGF0aCk7XG4gICAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgbmFtZXMpIHtcbiAgICAgICAgY29uc3Qgc3RhdCA9IGZmbXBlZy5GUy5zdGF0KGAke3BhdGh9LyR7bmFtZX1gKTtcbiAgICAgICAgY29uc3QgaXNEaXIgPSBmZm1wZWcuRlMuaXNEaXIoc3RhdC5tb2RlKTtcbiAgICAgICAgbm9kZXMucHVzaCh7IG5hbWUsIGlzRGlyIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZXM7XG59O1xuLy8gVE9ETzogY2hlY2sgaWYgZGVsZXRpb24gd29ya3MuXG5jb25zdCBkZWxldGVEaXIgPSAoeyBwYXRoIH0pID0+IHtcbiAgICBmZm1wZWcuRlMucm1kaXIocGF0aCk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuY29uc3QgbW91bnQgPSAoeyBmc1R5cGUsIG9wdGlvbnMsIG1vdW50UG9pbnQgfSkgPT4ge1xuICAgIGNvbnN0IHN0ciA9IGZzVHlwZTtcbiAgICBjb25zdCBmcyA9IGZmbXBlZy5GUy5maWxlc3lzdGVtc1tzdHJdO1xuICAgIGlmICghZnMpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmZm1wZWcuRlMubW91bnQoZnMsIG9wdGlvbnMsIG1vdW50UG9pbnQpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbmNvbnN0IHVubW91bnQgPSAoeyBtb3VudFBvaW50IH0pID0+IHtcbiAgICBmZm1wZWcuRlMudW5tb3VudChtb3VudFBvaW50KTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5zZWxmLm9ubWVzc2FnZSA9IGFzeW5jICh7IGRhdGE6IHsgaWQsIHR5cGUsIGRhdGE6IF9kYXRhIH0sIH0pID0+IHtcbiAgICBjb25zdCB0cmFucyA9IFtdO1xuICAgIGxldCBkYXRhO1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBGRk1lc3NhZ2VUeXBlLkxPQUQgJiYgIWZmbXBlZylcbiAgICAgICAgICAgIHRocm93IEVSUk9SX05PVF9MT0FERUQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIEZGTWVzc2FnZVR5cGUuTE9BRDpcbiAgICAgICAgICAgICAgICBkYXRhID0gYXdhaXQgbG9hZChfZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEZGTWVzc2FnZVR5cGUuRVhFQzpcbiAgICAgICAgICAgICAgICBkYXRhID0gZXhlYyhfZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEZGTWVzc2FnZVR5cGUuV1JJVEVfRklMRTpcbiAgICAgICAgICAgICAgICBkYXRhID0gd3JpdGVGaWxlKF9kYXRhKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRkZNZXNzYWdlVHlwZS5SRUFEX0ZJTEU6XG4gICAgICAgICAgICAgICAgZGF0YSA9IHJlYWRGaWxlKF9kYXRhKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRkZNZXNzYWdlVHlwZS5ERUxFVEVfRklMRTpcbiAgICAgICAgICAgICAgICBkYXRhID0gZGVsZXRlRmlsZShfZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEZGTWVzc2FnZVR5cGUuUkVOQU1FOlxuICAgICAgICAgICAgICAgIGRhdGEgPSByZW5hbWUoX2RhdGEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBGRk1lc3NhZ2VUeXBlLkNSRUFURV9ESVI6XG4gICAgICAgICAgICAgICAgZGF0YSA9IGNyZWF0ZURpcihfZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEZGTWVzc2FnZVR5cGUuTElTVF9ESVI6XG4gICAgICAgICAgICAgICAgZGF0YSA9IGxpc3REaXIoX2RhdGEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBGRk1lc3NhZ2VUeXBlLkRFTEVURV9ESVI6XG4gICAgICAgICAgICAgICAgZGF0YSA9IGRlbGV0ZURpcihfZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEZGTWVzc2FnZVR5cGUuTU9VTlQ6XG4gICAgICAgICAgICAgICAgZGF0YSA9IG1vdW50KF9kYXRhKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRkZNZXNzYWdlVHlwZS5VTk1PVU5UOlxuICAgICAgICAgICAgICAgIGRhdGEgPSB1bm1vdW50KF9kYXRhKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgRVJST1JfVU5LTk9XTl9NRVNTQUdFX1RZUEU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIHR5cGU6IEZGTWVzc2FnZVR5cGUuRVJST1IsXG4gICAgICAgICAgICBkYXRhOiBlLnRvU3RyaW5nKCksXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICB0cmFucy5wdXNoKGRhdGEuYnVmZmVyKTtcbiAgICB9XG4gICAgc2VsZi5wb3N0TWVzc2FnZSh7IGlkLCB0eXBlLCBkYXRhIH0sIHRyYW5zKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=